
##' @description Conjugate update in Bayesian linear model
##' @title Conjugate update in Bayesian linear model
##' @param formula A formula
##' @param data A dataframe
##' @param prior named list m (Mean in prior distribution of beta), C (Variance in prior distribution of beta), sd (Conditional variance of y given beta is sd I)
##' @param update.sd Should conditional variance be updated (emperical Bayes)
##' @return An object of class 'blm'
##' @author Søren Højsgaard
##'
##' @examples
##' form <- dist ~ speed + I(speed^2)
##' mm <- lm(form, data=cars)
##' coef(summary(mm))
##' sigma(mm)
##'
##' bb <- bayes_lm(form, data=cars, prior=list(m=c(1, 1, 1), C=diag(10,3), sd=2))
##' bb
##'
##' coef(bb)
##' sigma(bb)
##'
##' if (require(ggplot2)){
##' pp <- qplot(speed, dist, data=cars)
##' pp + geom_line(aes(x=speed, y=predict(bb)), col="red") +
##'      geom_line(aes(x=speed, y=predict(mm)), col="blue")
##' }

#' @export
lmb <- function(formula., data., prior, update.sd=TRUE){

    m  <- prior$m
    C  <- prior$C
    sd <- prior$sd 

    cl <- match.call()
    mf <- model.frame(formula., data=data.)
    X = model.matrix(mf, data=data.)

    dummy <- lm(update(formula., ~1), data=data.)
    yy <- unname(fitted(dummy) + resid(dummy))

    if (any(is.na(yy))) stop("missing values in response\n")

    if (!is.matrix(C))
        if (length(C) == 1) C <- diag(C, length(m))

    if (is.numeric(sd) && length(sd)==1)
        W <- diag(sd^2, length(yy))
    else
        stop("sd is not a number")
        
    Cyy = X %*% C %*% t(X) + W
    Cyb <- X %*% C 
    Cby <- t(Cyb)
    
    Ey <- as.numeric(X %*% m)
    
    m2 <- m + Cby %*% solve(Cyy, (yy - Ey))
    C2 <- C - Cby %*% solve(Cyy, Cyb)


    if (update.sd){
        yy <- data.[[deparse(formula.[[2]])]]
        X <- model.matrix(formula., data=data.)
        pp <- as.numeric(X %*% m2)
        rr <- yy - pp
        sd2 <- sd(rr)
    } else {
        sd2 <- sd
    }
    out <- list(call=cl, formula=formula.,
                prior     = list(m=m,   C=C,   sd=sd),
                posterior = list(m=m2,  C=C2,  sd=sd2),
                X=X, data=data.)

    class(out) <- "lmb_class"
    out
}

#' Convert lmb_class object to lm object
#' @export
#' @param object A lmb_class object
as_lm <- function(object){
    if (!inherits(object, "lmb_class"))
        stop("'object' must be lmb_class\n")
    cl <- object$call
    cl[[1]] <- as.name("lm")
    cl$prior <- NULL
    eval(cl)
}

#' 
#' @importFrom stats "coef" "fitted" "formula" "lm" "model.frame" sigma simulate predict
#'               "model.matrix" "quantile" "resid" "update" "vcov"


#' @export
coef.lmb_class <- function(object, ...){
    object$posterior$m
}

#' @export
vcov.lmb_class <- function(object, ...){
    object$posterior$C
}

#' @export
sigma.lmb_class <- function(object, ...){
    object$posterior$sd
}

#' @export
model.matrix.lmb_class <- function(object, ...){
    object$X
}

#' @export
print.lmb_class <- function(x, ...){
    cat("Bayesian linear model object\n")
    print(formula(x))
    print(as.numeric(coef(x)))
    invisible(x)
}

#' @importFrom broom tidy
#' @export
tidy.lmb_class <- function(x, ...){
    data.frame(estimate=coef(x),std.error=diag(vcov(x)))
}

get_model_matrix <- function(object, newdata=NULL){
    if (is.null(newdata))
        model.matrix(object)
    else model.matrix(object$formula, data=newdata)    
}

#' @export
predict.lmb_class <- function(object, newdata=NULL, ...){
    as.numeric(get_model_matrix(object, newdata) %*% coef(object))
}

#' @export
residuals.lmb_class <- function(object, ...){
  yy <- object$data[,deparse(object$formula[[2]])]
  pp <- predict(object)
  rr <- yy - pp
  rr
}



#' @importFrom MASS mvrnorm
#' @export
simulate.lmb_class <- function(object, nsim=1, seed=NULL, newdata=NULL, ...){
    if (nsim <=1){
        stop("Must have nsim > 1\n")
    }
    bb <- MASS::mvrnorm(n=nsim, mu=coef(object), Sigma=vcov(object))
    bb <- t(bb)
    mm <- get_model_matrix(object, newdata)
    pp <- mm %*% bb
    er <- sigma(object)^2 * diag(1, nrow(mm))
    ee <- MASS::mvrnorm(n=nsim, mu=rep(0, nrow(mm)), Sigma=er)
    ee <- t(ee)
    ## print(ee)    
    pp + ee
}

#' Prediction interval
#' @param object A 'lmb_class' object
#' @param level Level for interval
#' @param nsim Number of simulations to base the interval on
#' @param newdata New dataframe
#' @param ... Additional arguments, currently unused.
#' @author Søren Højsgaard

#' @export
predint <- function(object, level=0.95, nsim=100, newdata=NULL, ...){

    ss <- simulate(object, nsim=nsim, newdata=newdata)

    ## ee <- MASS::mvrnorm(n=nsim, mu=rep(0,nrow(sigma(object))), Sigma=sigma(object))
    ## print(dim(ss)); print(dim(ee))
     
    pp <- c((1-level) / 2, 1-(1-level)/2)
    out <- t(sapply(split(ss, row(ss)), function(r) quantile(r, pp)))
    out <- data.frame(cbind(predict(object, newdata), out))
    names(out) <- c("pred", "lwr", "upr")
    out
}
